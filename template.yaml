AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-statebackup

  Sample SAM Template for sam-statebackup

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  # API GW, public facing endpoint (TFC Webhook)
  WebhookFunction:
  # Note: the log group is created by the Lambda function, on demand
  # (weird, right?), IAM policy to write to logs as well.
  # you could explicitly create it as well but that's not typical
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-TFCWebhook"
      CodeUri: webhook/
      Handler: webhook.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment:
        Variables:
          SALT_PATH: !Sub "/${Environment}/HMACToken"
          STATE_SAVE_FUNCTION: !Sub "${Environment}-TFCStateSave"
      Events:
        StateSaveApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
        StateSaveHealthApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
      Policies:
      - Statement:
        - Sid: SSMDescribeParametersPolicy
          Effect: Allow
          Action:
          - ssm:DescribeParameters
          Resource: "*"
        - Sid: SSMGetParameterPolicy
          Effect: Allow
          Action:
          - ssm:GetParameters
          - ssm:GetParameter
          Resource: !Sub "arn:aws:ssm:*:*:parameter/${Environment}/HMACToken"
        - Sid: AllowInvoke
          Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: !GetAtt StateSaveFunction.Arn
  # here for reference: if you want to explicitly manage the log group
  # CloudWatch Log Group for Lambda function logs
  # MyLambdaLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub "/aws/lambda/${Environment}-StateSave"
  #     RetentionInDays: 14

  StateSaveFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-TFCStateSave"
      CodeUri: webhook/
      Handler: state_save.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment:
        Variables:
          TFC_TOKEN_PATH: !Sub "/${Environment}/TFC_TOKEN"
          S3_BUCKET: !Ref TFCStateBucket
          #DRY_RUN: "true"
      EventInvokeConfig:
        # Don't want to overwhelm the TFC API, retry once after a minute
        # Then send it to the SQS DLQ
        MaximumRetryAttempts: 1
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt FailedEventsQueue.Arn
      Policies:
      - Statement:
        - Sid: SSMDescribeParametersPolicy
          Effect: Allow
          Action:
          - ssm:DescribeParameters
          Resource: "*"
        - Sid: SSMGetParameterPolicy
          Effect: Allow
          Action:
          - ssm:GetParameters
          - ssm:GetParameter
          Resource: !Sub "arn:aws:ssm:*:*:parameter/${Environment}/TFC_TOKEN"
        - Sid: S3PutObjectPolicy
          Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          Resource: !Sub "arn:aws:s3:::${TFCStateBucket}/*"
        - Sid: S3ListBucketPolicy
          Effect: Allow
          Action:
          - s3:ListBucket
          Resource: !Sub "arn:aws:s3:::${TFCStateBucket}"
        - Sid: SQSSendMessagePolicy
          Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt FailedEventsQueue.Arn

  FailedEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-StateSaveFailedEvents"


  # SQSProcessorFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: dlq.handler
  #     Runtime: python3.12
  #     CodeUri: webhook/
  #     Description: "Lambda function that processes failed events from SQS and writes them to S3"
  #     MemorySize: 128
  #     Timeout: 10
  #     Policies:
  #       - CloudWatchLambdaInsightsExecutionPolicy
  #       - S3WritePolicy  # Allow writing to S3
  #       - SQSReceiveMessagePolicy  # Custom policy to read from SQS
  #     Events:
  #       SQSTrigger:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt FailedEventsQueue.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StateSaveFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt WebhookFunction.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  StateSaveApi:
    Description: "API Gateway endpoint URL for Prod stage for StateSave function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  StateSaveFunction:
    Description: "StateSave Lambda Function ARN"
    Value: !GetAtt StateSaveFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for StateSave function"
    Value: !GetAtt StateSaveFunctionRole.Arn
Parameters:
  Environment:
    Description: "Benchling environment"
    Type: String
  TFCStateBucket:
    Description: "S3 bucket for state backups"
    Type: String
